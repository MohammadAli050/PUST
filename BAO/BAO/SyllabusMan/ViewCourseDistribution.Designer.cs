//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

#pragma warning disable 1591

namespace BussinessObject.SyllabusMan {
    
    
    /// <summary>
    ///Represents a strongly typed in-memory cache of data.
    ///</summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
    [global::System.Serializable()]
    [global::System.ComponentModel.DesignerCategoryAttribute("code")]
    [global::System.ComponentModel.ToolboxItem(true)]
    [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [global::System.Xml.Serialization.XmlRootAttribute("ViewCourseDistribution")]
    [global::System.ComponentModel.Design.HelpKeywordAttribute("vs.data.DataSet")]
    public partial class ViewCourseDistribution : global::System.Data.DataSet {
        
        private ProgStructCourseDataTable tableProgStructCourse;
        
        private ProgStructDataTable tableProgStruct;
        
        private VnodeSetDataTable tableVnodeSet;
        
        private global::System.Data.SchemaSerializationMode _schemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public ViewCourseDistribution() {
            this.BeginInit();
            this.InitClass();
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected ViewCourseDistribution(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                base(info, context, false) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((this.DetermineSchemaSerializationMode(info, context) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
                if ((ds.Tables["ProgStructCourse"] != null)) {
                    base.Tables.Add(new ProgStructCourseDataTable(ds.Tables["ProgStructCourse"]));
                }
                if ((ds.Tables["ProgStruct"] != null)) {
                    base.Tables.Add(new ProgStructDataTable(ds.Tables["ProgStruct"]));
                }
                if ((ds.Tables["VnodeSet"] != null)) {
                    base.Tables.Add(new VnodeSetDataTable(ds.Tables["VnodeSet"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXmlSchema(new global::System.Xml.XmlTextReader(new global::System.IO.StringReader(strSchema)));
            }
            this.GetSerializationData(info, context);
            global::System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new global::System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProgStructCourseDataTable ProgStructCourse {
            get {
                return this.tableProgStructCourse;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public ProgStructDataTable ProgStruct {
            get {
                return this.tableProgStruct;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.Browsable(false)]
        [global::System.ComponentModel.DesignerSerializationVisibility(global::System.ComponentModel.DesignerSerializationVisibility.Content)]
        public VnodeSetDataTable VnodeSet {
            get {
                return this.tableVnodeSet;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.BrowsableAttribute(true)]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Visible)]
        public override global::System.Data.SchemaSerializationMode SchemaSerializationMode {
            get {
                return this._schemaSerializationMode;
            }
            set {
                this._schemaSerializationMode = value;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        [global::System.ComponentModel.DesignerSerializationVisibilityAttribute(global::System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new global::System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void InitializeDerivedDataSet() {
            this.BeginInit();
            this.InitClass();
            this.EndInit();
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public override global::System.Data.DataSet Clone() {
            ViewCourseDistribution cln = ((ViewCourseDistribution)(base.Clone()));
            cln.InitVars();
            cln.SchemaSerializationMode = this.SchemaSerializationMode;
            return cln;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override void ReadXmlSerializable(global::System.Xml.XmlReader reader) {
            if ((this.DetermineSchemaSerializationMode(reader) == global::System.Data.SchemaSerializationMode.IncludeSchema)) {
                this.Reset();
                global::System.Data.DataSet ds = new global::System.Data.DataSet();
                ds.ReadXml(reader);
                if ((ds.Tables["ProgStructCourse"] != null)) {
                    base.Tables.Add(new ProgStructCourseDataTable(ds.Tables["ProgStructCourse"]));
                }
                if ((ds.Tables["ProgStruct"] != null)) {
                    base.Tables.Add(new ProgStructDataTable(ds.Tables["ProgStruct"]));
                }
                if ((ds.Tables["VnodeSet"] != null)) {
                    base.Tables.Add(new VnodeSetDataTable(ds.Tables["VnodeSet"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, global::System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.ReadXml(reader);
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        protected override global::System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            global::System.IO.MemoryStream stream = new global::System.IO.MemoryStream();
            this.WriteXmlSchema(new global::System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return global::System.Xml.Schema.XmlSchema.Read(new global::System.Xml.XmlTextReader(stream), null);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars() {
            this.InitVars(true);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        internal void InitVars(bool initTable) {
            this.tableProgStructCourse = ((ProgStructCourseDataTable)(base.Tables["ProgStructCourse"]));
            if ((initTable == true)) {
                if ((this.tableProgStructCourse != null)) {
                    this.tableProgStructCourse.InitVars();
                }
            }
            this.tableProgStruct = ((ProgStructDataTable)(base.Tables["ProgStruct"]));
            if ((initTable == true)) {
                if ((this.tableProgStruct != null)) {
                    this.tableProgStruct.InitVars();
                }
            }
            this.tableVnodeSet = ((VnodeSetDataTable)(base.Tables["VnodeSet"]));
            if ((initTable == true)) {
                if ((this.tableVnodeSet != null)) {
                    this.tableVnodeSet.InitVars();
                }
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void InitClass() {
            this.DataSetName = "ViewCourseDistribution";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/ViewCourseDistribution.xsd";
            this.EnforceConstraints = true;
            this.SchemaSerializationMode = global::System.Data.SchemaSerializationMode.IncludeSchema;
            this.tableProgStructCourse = new ProgStructCourseDataTable();
            base.Tables.Add(this.tableProgStructCourse);
            this.tableProgStruct = new ProgStructDataTable();
            base.Tables.Add(this.tableProgStruct);
            this.tableVnodeSet = new VnodeSetDataTable();
            base.Tables.Add(this.tableVnodeSet);
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProgStructCourse() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeProgStruct() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private bool ShouldSerializeVnodeSet() {
            return false;
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        private void SchemaChanged(object sender, global::System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == global::System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
            ViewCourseDistribution ds = new ViewCourseDistribution();
            global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
            global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
            global::System.Xml.Schema.XmlSchemaAny any = new global::System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
            if (xs.Contains(dsSchema.TargetNamespace)) {
                global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                try {
                    global::System.Xml.Schema.XmlSchema schema = null;
                    dsSchema.Write(s1);
                    for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                        schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                        s2.SetLength(0);
                        schema.Write(s2);
                        if ((s1.Length == s2.Length)) {
                            s1.Position = 0;
                            s2.Position = 0;
                            for (; ((s1.Position != s1.Length) 
                                        && (s1.ReadByte() == s2.ReadByte())); ) {
                                ;
                            }
                            if ((s1.Position == s1.Length)) {
                                return type;
                            }
                        }
                    }
                }
                finally {
                    if ((s1 != null)) {
                        s1.Close();
                    }
                    if ((s2 != null)) {
                        s2.Close();
                    }
                }
            }
            xs.Add(dsSchema);
            return type;
        }
        
        public delegate void ProgStructCourseRowChangeEventHandler(object sender, ProgStructCourseRowChangeEvent e);
        
        public delegate void ProgStructRowChangeEventHandler(object sender, ProgStructRowChangeEvent e);
        
        public delegate void VnodeSetRowChangeEventHandler(object sender, VnodeSetRowChangeEvent e);
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProgStructCourseDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnNodeID;
            
            private global::System.Data.DataColumn columnProgStructName;
            
            private global::System.Data.DataColumn columnCourseID;
            
            private global::System.Data.DataColumn columnVersionID;
            
            private global::System.Data.DataColumn columnFormalCode;
            
            private global::System.Data.DataColumn columnVersionCode;
            
            private global::System.Data.DataColumn columnTitle;
            
            private global::System.Data.DataColumn columnPassingGPA;
            
            private global::System.Data.DataColumn columnPriority;
            
            private global::System.Data.DataColumn columnAssocCourseID;
            
            private global::System.Data.DataColumn columnAssocVersionID;
            
            private global::System.Data.DataColumn columnStartTrimesterID;
            
            private global::System.Data.DataColumn columnProgramID;
            
            private global::System.Data.DataColumn columnCourseContent;
            
            private global::System.Data.DataColumn columnCredits;
            
            private global::System.Data.DataColumn columnIsCreditCourse;
            
            private global::System.Data.DataColumn columnIsThesis;
            
            private global::System.Data.DataColumn columnIsProject;
            
            private global::System.Data.DataColumn columnHasEquivalents;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgStructCourseDataTable() {
                this.TableName = "ProgStructCourse";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProgStructCourseDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProgStructCourseDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NodeIDColumn {
                get {
                    return this.columnNodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgStructNameColumn {
                get {
                    return this.columnProgStructName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CourseIDColumn {
                get {
                    return this.columnCourseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VersionIDColumn {
                get {
                    return this.columnVersionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn FormalCodeColumn {
                get {
                    return this.columnFormalCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VersionCodeColumn {
                get {
                    return this.columnVersionCode;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn TitleColumn {
                get {
                    return this.columnTitle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PassingGPAColumn {
                get {
                    return this.columnPassingGPA;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn PriorityColumn {
                get {
                    return this.columnPriority;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssocCourseIDColumn {
                get {
                    return this.columnAssocCourseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn AssocVersionIDColumn {
                get {
                    return this.columnAssocVersionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartTrimesterIDColumn {
                get {
                    return this.columnStartTrimesterID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgramIDColumn {
                get {
                    return this.columnProgramID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CourseContentColumn {
                get {
                    return this.columnCourseContent;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn CreditsColumn {
                get {
                    return this.columnCredits;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsCreditCourseColumn {
                get {
                    return this.columnIsCreditCourse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsThesisColumn {
                get {
                    return this.columnIsThesis;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsProjectColumn {
                get {
                    return this.columnIsProject;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn HasEquivalentsColumn {
                get {
                    return this.columnHasEquivalents;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgStructCourseRow this[int index] {
                get {
                    return ((ProgStructCourseRow)(this.Rows[index]));
                }
            }
            
            public event ProgStructCourseRowChangeEventHandler ProgStructCourseRowChanging;
            
            public event ProgStructCourseRowChangeEventHandler ProgStructCourseRowChanged;
            
            public event ProgStructCourseRowChangeEventHandler ProgStructCourseRowDeleting;
            
            public event ProgStructCourseRowChangeEventHandler ProgStructCourseRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProgStructCourseRow(ProgStructCourseRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgStructCourseRow AddProgStructCourseRow(
                        int NodeID, 
                        string ProgStructName, 
                        int CourseID, 
                        int VersionID, 
                        string FormalCode, 
                        string VersionCode, 
                        string Title, 
                        decimal PassingGPA, 
                        int Priority, 
                        int AssocCourseID, 
                        int AssocVersionID, 
                        int StartTrimesterID, 
                        int ProgramID, 
                        string CourseContent, 
                        decimal Credits, 
                        bool IsCreditCourse, 
                        bool IsThesis, 
                        bool IsProject, 
                        bool HasEquivalents) {
                ProgStructCourseRow rowProgStructCourseRow = ((ProgStructCourseRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NodeID,
                        ProgStructName,
                        CourseID,
                        VersionID,
                        FormalCode,
                        VersionCode,
                        Title,
                        PassingGPA,
                        Priority,
                        AssocCourseID,
                        AssocVersionID,
                        StartTrimesterID,
                        ProgramID,
                        CourseContent,
                        Credits,
                        IsCreditCourse,
                        IsThesis,
                        IsProject,
                        HasEquivalents};
                rowProgStructCourseRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProgStructCourseRow);
                return rowProgStructCourseRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProgStructCourseDataTable cln = ((ProgStructCourseDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProgStructCourseDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNodeID = base.Columns["NodeID"];
                this.columnProgStructName = base.Columns["ProgStructName"];
                this.columnCourseID = base.Columns["CourseID"];
                this.columnVersionID = base.Columns["VersionID"];
                this.columnFormalCode = base.Columns["FormalCode"];
                this.columnVersionCode = base.Columns["VersionCode"];
                this.columnTitle = base.Columns["Title"];
                this.columnPassingGPA = base.Columns["PassingGPA"];
                this.columnPriority = base.Columns["Priority"];
                this.columnAssocCourseID = base.Columns["AssocCourseID"];
                this.columnAssocVersionID = base.Columns["AssocVersionID"];
                this.columnStartTrimesterID = base.Columns["StartTrimesterID"];
                this.columnProgramID = base.Columns["ProgramID"];
                this.columnCourseContent = base.Columns["CourseContent"];
                this.columnCredits = base.Columns["Credits"];
                this.columnIsCreditCourse = base.Columns["IsCreditCourse"];
                this.columnIsThesis = base.Columns["IsThesis"];
                this.columnIsProject = base.Columns["IsProject"];
                this.columnHasEquivalents = base.Columns["HasEquivalents"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNodeID = new global::System.Data.DataColumn("NodeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNodeID);
                this.columnProgStructName = new global::System.Data.DataColumn("ProgStructName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgStructName);
                this.columnCourseID = new global::System.Data.DataColumn("CourseID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCourseID);
                this.columnVersionID = new global::System.Data.DataColumn("VersionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersionID);
                this.columnFormalCode = new global::System.Data.DataColumn("FormalCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnFormalCode);
                this.columnVersionCode = new global::System.Data.DataColumn("VersionCode", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVersionCode);
                this.columnTitle = new global::System.Data.DataColumn("Title", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnTitle);
                this.columnPassingGPA = new global::System.Data.DataColumn("PassingGPA", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassingGPA);
                this.columnPriority = new global::System.Data.DataColumn("Priority", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnPriority);
                this.columnAssocCourseID = new global::System.Data.DataColumn("AssocCourseID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssocCourseID);
                this.columnAssocVersionID = new global::System.Data.DataColumn("AssocVersionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnAssocVersionID);
                this.columnStartTrimesterID = new global::System.Data.DataColumn("StartTrimesterID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartTrimesterID);
                this.columnProgramID = new global::System.Data.DataColumn("ProgramID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgramID);
                this.columnCourseContent = new global::System.Data.DataColumn("CourseContent", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCourseContent);
                this.columnCredits = new global::System.Data.DataColumn("Credits", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnCredits);
                this.columnIsCreditCourse = new global::System.Data.DataColumn("IsCreditCourse", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsCreditCourse);
                this.columnIsThesis = new global::System.Data.DataColumn("IsThesis", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsThesis);
                this.columnIsProject = new global::System.Data.DataColumn("IsProject", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsProject);
                this.columnHasEquivalents = new global::System.Data.DataColumn("HasEquivalents", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnHasEquivalents);
                this.columnProgStructName.MaxLength = 150;
                this.columnFormalCode.MaxLength = 50;
                this.columnVersionCode.MaxLength = 50;
                this.columnTitle.MaxLength = 150;
                this.columnCourseContent.MaxLength = 500;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgStructCourseRow NewProgStructCourseRow() {
                return ((ProgStructCourseRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProgStructCourseRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProgStructCourseRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProgStructCourseRowChanged != null)) {
                    this.ProgStructCourseRowChanged(this, new ProgStructCourseRowChangeEvent(((ProgStructCourseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProgStructCourseRowChanging != null)) {
                    this.ProgStructCourseRowChanging(this, new ProgStructCourseRowChangeEvent(((ProgStructCourseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProgStructCourseRowDeleted != null)) {
                    this.ProgStructCourseRowDeleted(this, new ProgStructCourseRowChangeEvent(((ProgStructCourseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProgStructCourseRowDeleting != null)) {
                    this.ProgStructCourseRowDeleting(this, new ProgStructCourseRowChangeEvent(((ProgStructCourseRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProgStructCourseRow(ProgStructCourseRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ViewCourseDistribution ds = new ViewCourseDistribution();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProgStructCourseDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class ProgStructDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnNodeID;
            
            private global::System.Data.DataColumn columnProgStructureName;
            
            private global::System.Data.DataColumn columnParentNodeID;
            
            private global::System.Data.DataColumn columnIsLastLevel;
            
            private global::System.Data.DataColumn columnMinCredit;
            
            private global::System.Data.DataColumn columnMaxCredit;
            
            private global::System.Data.DataColumn columnMinCourses;
            
            private global::System.Data.DataColumn columnMaxCourse;
            
            private global::System.Data.DataColumn columnIsVirtual;
            
            private global::System.Data.DataColumn columnIsBundle;
            
            private global::System.Data.DataColumn columnStartTrimesterID;
            
            private global::System.Data.DataColumn columnOperatorID;
            
            private global::System.Data.DataColumn columnOperandNodes;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgStructDataTable() {
                this.TableName = "ProgStruct";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProgStructDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected ProgStructDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NodeIDColumn {
                get {
                    return this.columnNodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ProgStructureNameColumn {
                get {
                    return this.columnProgStructureName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn ParentNodeIDColumn {
                get {
                    return this.columnParentNodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsLastLevelColumn {
                get {
                    return this.columnIsLastLevel;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinCreditColumn {
                get {
                    return this.columnMinCredit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxCreditColumn {
                get {
                    return this.columnMaxCredit;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MinCoursesColumn {
                get {
                    return this.columnMinCourses;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn MaxCourseColumn {
                get {
                    return this.columnMaxCourse;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsVirtualColumn {
                get {
                    return this.columnIsVirtual;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsBundleColumn {
                get {
                    return this.columnIsBundle;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn StartTrimesterIDColumn {
                get {
                    return this.columnStartTrimesterID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OperatorIDColumn {
                get {
                    return this.columnOperatorID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OperandNodesColumn {
                get {
                    return this.columnOperandNodes;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgStructRow this[int index] {
                get {
                    return ((ProgStructRow)(this.Rows[index]));
                }
            }
            
            public event ProgStructRowChangeEventHandler ProgStructRowChanging;
            
            public event ProgStructRowChangeEventHandler ProgStructRowChanged;
            
            public event ProgStructRowChangeEventHandler ProgStructRowDeleting;
            
            public event ProgStructRowChangeEventHandler ProgStructRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddProgStructRow(ProgStructRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgStructRow AddProgStructRow(int NodeID, string ProgStructureName, int ParentNodeID, bool IsLastLevel, decimal MinCredit, decimal MaxCredit, int MinCourses, int MaxCourse, bool IsVirtual, bool IsBundle, int StartTrimesterID, int OperatorID, int OperandNodes) {
                ProgStructRow rowProgStructRow = ((ProgStructRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        NodeID,
                        ProgStructureName,
                        ParentNodeID,
                        IsLastLevel,
                        MinCredit,
                        MaxCredit,
                        MinCourses,
                        MaxCourse,
                        IsVirtual,
                        IsBundle,
                        StartTrimesterID,
                        OperatorID,
                        OperandNodes};
                rowProgStructRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowProgStructRow);
                return rowProgStructRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgStructRow FindByNodeID(int NodeID) {
                return ((ProgStructRow)(this.Rows.Find(new object[] {
                            NodeID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                ProgStructDataTable cln = ((ProgStructDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new ProgStructDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnNodeID = base.Columns["NodeID"];
                this.columnProgStructureName = base.Columns["ProgStructureName"];
                this.columnParentNodeID = base.Columns["ParentNodeID"];
                this.columnIsLastLevel = base.Columns["IsLastLevel"];
                this.columnMinCredit = base.Columns["MinCredit"];
                this.columnMaxCredit = base.Columns["MaxCredit"];
                this.columnMinCourses = base.Columns["MinCourses"];
                this.columnMaxCourse = base.Columns["MaxCourse"];
                this.columnIsVirtual = base.Columns["IsVirtual"];
                this.columnIsBundle = base.Columns["IsBundle"];
                this.columnStartTrimesterID = base.Columns["StartTrimesterID"];
                this.columnOperatorID = base.Columns["OperatorID"];
                this.columnOperandNodes = base.Columns["OperandNodes"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnNodeID = new global::System.Data.DataColumn("NodeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNodeID);
                this.columnProgStructureName = new global::System.Data.DataColumn("ProgStructureName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnProgStructureName);
                this.columnParentNodeID = new global::System.Data.DataColumn("ParentNodeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnParentNodeID);
                this.columnIsLastLevel = new global::System.Data.DataColumn("IsLastLevel", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsLastLevel);
                this.columnMinCredit = new global::System.Data.DataColumn("MinCredit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinCredit);
                this.columnMaxCredit = new global::System.Data.DataColumn("MaxCredit", typeof(decimal), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxCredit);
                this.columnMinCourses = new global::System.Data.DataColumn("MinCourses", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMinCourses);
                this.columnMaxCourse = new global::System.Data.DataColumn("MaxCourse", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnMaxCourse);
                this.columnIsVirtual = new global::System.Data.DataColumn("IsVirtual", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsVirtual);
                this.columnIsBundle = new global::System.Data.DataColumn("IsBundle", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsBundle);
                this.columnStartTrimesterID = new global::System.Data.DataColumn("StartTrimesterID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnStartTrimesterID);
                this.columnOperatorID = new global::System.Data.DataColumn("OperatorID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperatorID);
                this.columnOperandNodes = new global::System.Data.DataColumn("OperandNodes", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperandNodes);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnNodeID}, true));
                this.columnNodeID.AllowDBNull = false;
                this.columnNodeID.Unique = true;
                this.columnProgStructureName.AllowDBNull = false;
                this.columnProgStructureName.MaxLength = 150;
                this.columnIsLastLevel.AllowDBNull = false;
                this.columnIsVirtual.AllowDBNull = false;
                this.columnIsBundle.AllowDBNull = false;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgStructRow NewProgStructRow() {
                return ((ProgStructRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new ProgStructRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(ProgStructRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.ProgStructRowChanged != null)) {
                    this.ProgStructRowChanged(this, new ProgStructRowChangeEvent(((ProgStructRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.ProgStructRowChanging != null)) {
                    this.ProgStructRowChanging(this, new ProgStructRowChangeEvent(((ProgStructRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.ProgStructRowDeleted != null)) {
                    this.ProgStructRowDeleted(this, new ProgStructRowChangeEvent(((ProgStructRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.ProgStructRowDeleting != null)) {
                    this.ProgStructRowDeleting(this, new ProgStructRowChangeEvent(((ProgStructRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveProgStructRow(ProgStructRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ViewCourseDistribution ds = new ViewCourseDistribution();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "ProgStructDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents the strongly named DataTable class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        [global::System.Serializable()]
        [global::System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class VnodeSetDataTable : global::System.Data.DataTable, global::System.Collections.IEnumerable {
            
            private global::System.Data.DataColumn columnVNodeSetID;
            
            private global::System.Data.DataColumn columnNodeID;
            
            private global::System.Data.DataColumn columnSetNo;
            
            private global::System.Data.DataColumn columnOperandNodeID;
            
            private global::System.Data.DataColumn columnOperandCourseID;
            
            private global::System.Data.DataColumn columnOperandVersionID;
            
            private global::System.Data.DataColumn columnOperatorName;
            
            private global::System.Data.DataColumn columnWildCard;
            
            private global::System.Data.DataColumn columnIsStudntSpec;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VnodeSetDataTable() {
                this.TableName = "VnodeSet";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VnodeSetDataTable(global::System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected VnodeSetDataTable(global::System.Runtime.Serialization.SerializationInfo info, global::System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn VNodeSetIDColumn {
                get {
                    return this.columnVNodeSetID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn NodeIDColumn {
                get {
                    return this.columnNodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn SetNoColumn {
                get {
                    return this.columnSetNo;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OperandNodeIDColumn {
                get {
                    return this.columnOperandNodeID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OperandCourseIDColumn {
                get {
                    return this.columnOperandCourseID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OperandVersionIDColumn {
                get {
                    return this.columnOperandVersionID;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn OperatorNameColumn {
                get {
                    return this.columnOperatorName;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn WildCardColumn {
                get {
                    return this.columnWildCard;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataColumn IsStudntSpecColumn {
                get {
                    return this.columnIsStudntSpec;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            [global::System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VnodeSetRow this[int index] {
                get {
                    return ((VnodeSetRow)(this.Rows[index]));
                }
            }
            
            public event VnodeSetRowChangeEventHandler VnodeSetRowChanging;
            
            public event VnodeSetRowChangeEventHandler VnodeSetRowChanged;
            
            public event VnodeSetRowChangeEventHandler VnodeSetRowDeleting;
            
            public event VnodeSetRowChangeEventHandler VnodeSetRowDeleted;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void AddVnodeSetRow(VnodeSetRow row) {
                this.Rows.Add(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VnodeSetRow AddVnodeSetRow(int VNodeSetID, int NodeID, int SetNo, int OperandNodeID, int OperandCourseID, int OperandVersionID, string OperatorName, string WildCard, bool IsStudntSpec) {
                VnodeSetRow rowVnodeSetRow = ((VnodeSetRow)(this.NewRow()));
                object[] columnValuesArray = new object[] {
                        VNodeSetID,
                        NodeID,
                        SetNo,
                        OperandNodeID,
                        OperandCourseID,
                        OperandVersionID,
                        OperatorName,
                        WildCard,
                        IsStudntSpec};
                rowVnodeSetRow.ItemArray = columnValuesArray;
                this.Rows.Add(rowVnodeSetRow);
                return rowVnodeSetRow;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VnodeSetRow FindByVNodeSetID(int VNodeSetID) {
                return ((VnodeSetRow)(this.Rows.Find(new object[] {
                            VNodeSetID})));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public virtual global::System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public override global::System.Data.DataTable Clone() {
                VnodeSetDataTable cln = ((VnodeSetDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataTable CreateInstance() {
                return new VnodeSetDataTable();
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal void InitVars() {
                this.columnVNodeSetID = base.Columns["VNodeSetID"];
                this.columnNodeID = base.Columns["NodeID"];
                this.columnSetNo = base.Columns["SetNo"];
                this.columnOperandNodeID = base.Columns["OperandNodeID"];
                this.columnOperandCourseID = base.Columns["OperandCourseID"];
                this.columnOperandVersionID = base.Columns["OperandVersionID"];
                this.columnOperatorName = base.Columns["OperatorName"];
                this.columnWildCard = base.Columns["WildCard"];
                this.columnIsStudntSpec = base.Columns["IsStudntSpec"];
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            private void InitClass() {
                this.columnVNodeSetID = new global::System.Data.DataColumn("VNodeSetID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnVNodeSetID);
                this.columnNodeID = new global::System.Data.DataColumn("NodeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnNodeID);
                this.columnSetNo = new global::System.Data.DataColumn("SetNo", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnSetNo);
                this.columnOperandNodeID = new global::System.Data.DataColumn("OperandNodeID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperandNodeID);
                this.columnOperandCourseID = new global::System.Data.DataColumn("OperandCourseID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperandCourseID);
                this.columnOperandVersionID = new global::System.Data.DataColumn("OperandVersionID", typeof(int), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperandVersionID);
                this.columnOperatorName = new global::System.Data.DataColumn("OperatorName", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnOperatorName);
                this.columnWildCard = new global::System.Data.DataColumn("WildCard", typeof(string), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnWildCard);
                this.columnIsStudntSpec = new global::System.Data.DataColumn("IsStudntSpec", typeof(bool), null, global::System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsStudntSpec);
                this.Constraints.Add(new global::System.Data.UniqueConstraint("Constraint1", new global::System.Data.DataColumn[] {
                                this.columnVNodeSetID}, true));
                this.columnVNodeSetID.AllowDBNull = false;
                this.columnVNodeSetID.Unique = true;
                this.columnNodeID.AllowDBNull = false;
                this.columnSetNo.AllowDBNull = false;
                this.columnOperatorName.AllowDBNull = false;
                this.columnOperatorName.MaxLength = 50;
                this.columnWildCard.MaxLength = 50;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VnodeSetRow NewVnodeSetRow() {
                return ((VnodeSetRow)(this.NewRow()));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Data.DataRow NewRowFromBuilder(global::System.Data.DataRowBuilder builder) {
                return new VnodeSetRow(builder);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override global::System.Type GetRowType() {
                return typeof(VnodeSetRow);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanged(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.VnodeSetRowChanged != null)) {
                    this.VnodeSetRowChanged(this, new VnodeSetRowChangeEvent(((VnodeSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowChanging(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.VnodeSetRowChanging != null)) {
                    this.VnodeSetRowChanging(this, new VnodeSetRowChangeEvent(((VnodeSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleted(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.VnodeSetRowDeleted != null)) {
                    this.VnodeSetRowDeleted(this, new VnodeSetRowChangeEvent(((VnodeSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            protected override void OnRowDeleting(global::System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.VnodeSetRowDeleting != null)) {
                    this.VnodeSetRowDeleting(this, new VnodeSetRowChangeEvent(((VnodeSetRow)(e.Row)), e.Action));
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void RemoveVnodeSetRow(VnodeSetRow row) {
                this.Rows.Remove(row);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public static global::System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(global::System.Xml.Schema.XmlSchemaSet xs) {
                global::System.Xml.Schema.XmlSchemaComplexType type = new global::System.Xml.Schema.XmlSchemaComplexType();
                global::System.Xml.Schema.XmlSchemaSequence sequence = new global::System.Xml.Schema.XmlSchemaSequence();
                ViewCourseDistribution ds = new ViewCourseDistribution();
                global::System.Xml.Schema.XmlSchemaAny any1 = new global::System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                global::System.Xml.Schema.XmlSchemaAny any2 = new global::System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = global::System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                global::System.Xml.Schema.XmlSchemaAttribute attribute1 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                global::System.Xml.Schema.XmlSchemaAttribute attribute2 = new global::System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "VnodeSetDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                global::System.Xml.Schema.XmlSchema dsSchema = ds.GetSchemaSerializable();
                if (xs.Contains(dsSchema.TargetNamespace)) {
                    global::System.IO.MemoryStream s1 = new global::System.IO.MemoryStream();
                    global::System.IO.MemoryStream s2 = new global::System.IO.MemoryStream();
                    try {
                        global::System.Xml.Schema.XmlSchema schema = null;
                        dsSchema.Write(s1);
                        for (global::System.Collections.IEnumerator schemas = xs.Schemas(dsSchema.TargetNamespace).GetEnumerator(); schemas.MoveNext(); ) {
                            schema = ((global::System.Xml.Schema.XmlSchema)(schemas.Current));
                            s2.SetLength(0);
                            schema.Write(s2);
                            if ((s1.Length == s2.Length)) {
                                s1.Position = 0;
                                s2.Position = 0;
                                for (; ((s1.Position != s1.Length) 
                                            && (s1.ReadByte() == s2.ReadByte())); ) {
                                    ;
                                }
                                if ((s1.Position == s1.Length)) {
                                    return type;
                                }
                            }
                        }
                    }
                    finally {
                        if ((s1 != null)) {
                            s1.Close();
                        }
                        if ((s2 != null)) {
                            s2.Close();
                        }
                    }
                }
                xs.Add(dsSchema);
                return type;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProgStructCourseRow : global::System.Data.DataRow {
            
            private ProgStructCourseDataTable tableProgStructCourse;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProgStructCourseRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProgStructCourse = ((ProgStructCourseDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NodeID {
                get {
                    try {
                        return ((int)(this[this.tableProgStructCourse.NodeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'NodeID\' in table \'ProgStructCourse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStructCourse.NodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProgStructName {
                get {
                    try {
                        return ((string)(this[this.tableProgStructCourse.ProgStructNameColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProgStructName\' in table \'ProgStructCourse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStructCourse.ProgStructNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int CourseID {
                get {
                    try {
                        return ((int)(this[this.tableProgStructCourse.CourseIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CourseID\' in table \'ProgStructCourse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStructCourse.CourseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VersionID {
                get {
                    try {
                        return ((int)(this[this.tableProgStructCourse.VersionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VersionID\' in table \'ProgStructCourse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStructCourse.VersionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string FormalCode {
                get {
                    try {
                        return ((string)(this[this.tableProgStructCourse.FormalCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'FormalCode\' in table \'ProgStructCourse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStructCourse.FormalCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string VersionCode {
                get {
                    try {
                        return ((string)(this[this.tableProgStructCourse.VersionCodeColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'VersionCode\' in table \'ProgStructCourse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStructCourse.VersionCodeColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string Title {
                get {
                    try {
                        return ((string)(this[this.tableProgStructCourse.TitleColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Title\' in table \'ProgStructCourse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStructCourse.TitleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal PassingGPA {
                get {
                    try {
                        return ((decimal)(this[this.tableProgStructCourse.PassingGPAColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'PassingGPA\' in table \'ProgStructCourse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStructCourse.PassingGPAColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int Priority {
                get {
                    try {
                        return ((int)(this[this.tableProgStructCourse.PriorityColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Priority\' in table \'ProgStructCourse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStructCourse.PriorityColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssocCourseID {
                get {
                    try {
                        return ((int)(this[this.tableProgStructCourse.AssocCourseIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssocCourseID\' in table \'ProgStructCourse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStructCourse.AssocCourseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int AssocVersionID {
                get {
                    try {
                        return ((int)(this[this.tableProgStructCourse.AssocVersionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'AssocVersionID\' in table \'ProgStructCourse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStructCourse.AssocVersionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StartTrimesterID {
                get {
                    try {
                        return ((int)(this[this.tableProgStructCourse.StartTrimesterIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartTrimesterID\' in table \'ProgStructCourse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStructCourse.StartTrimesterIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ProgramID {
                get {
                    try {
                        return ((int)(this[this.tableProgStructCourse.ProgramIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ProgramID\' in table \'ProgStructCourse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStructCourse.ProgramIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string CourseContent {
                get {
                    try {
                        return ((string)(this[this.tableProgStructCourse.CourseContentColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'CourseContent\' in table \'ProgStructCourse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStructCourse.CourseContentColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal Credits {
                get {
                    try {
                        return ((decimal)(this[this.tableProgStructCourse.CreditsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'Credits\' in table \'ProgStructCourse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStructCourse.CreditsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreditCourse {
                get {
                    try {
                        return ((bool)(this[this.tableProgStructCourse.IsCreditCourseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsCreditCourse\' in table \'ProgStructCourse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStructCourse.IsCreditCourseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsThesis {
                get {
                    try {
                        return ((bool)(this[this.tableProgStructCourse.IsThesisColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsThesis\' in table \'ProgStructCourse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStructCourse.IsThesisColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProject {
                get {
                    try {
                        return ((bool)(this[this.tableProgStructCourse.IsProjectColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsProject\' in table \'ProgStructCourse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStructCourse.IsProjectColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool HasEquivalents {
                get {
                    try {
                        return ((bool)(this[this.tableProgStructCourse.HasEquivalentsColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'HasEquivalents\' in table \'ProgStructCourse\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStructCourse.HasEquivalentsColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsNodeIDNull() {
                return this.IsNull(this.tableProgStructCourse.NodeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetNodeIDNull() {
                this[this.tableProgStructCourse.NodeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProgStructNameNull() {
                return this.IsNull(this.tableProgStructCourse.ProgStructNameColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProgStructNameNull() {
                this[this.tableProgStructCourse.ProgStructNameColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCourseIDNull() {
                return this.IsNull(this.tableProgStructCourse.CourseIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCourseIDNull() {
                this[this.tableProgStructCourse.CourseIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVersionIDNull() {
                return this.IsNull(this.tableProgStructCourse.VersionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVersionIDNull() {
                this[this.tableProgStructCourse.VersionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsFormalCodeNull() {
                return this.IsNull(this.tableProgStructCourse.FormalCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetFormalCodeNull() {
                this[this.tableProgStructCourse.FormalCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVersionCodeNull() {
                return this.IsNull(this.tableProgStructCourse.VersionCodeColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetVersionCodeNull() {
                this[this.tableProgStructCourse.VersionCodeColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsTitleNull() {
                return this.IsNull(this.tableProgStructCourse.TitleColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetTitleNull() {
                this[this.tableProgStructCourse.TitleColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPassingGPANull() {
                return this.IsNull(this.tableProgStructCourse.PassingGPAColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPassingGPANull() {
                this[this.tableProgStructCourse.PassingGPAColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsPriorityNull() {
                return this.IsNull(this.tableProgStructCourse.PriorityColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetPriorityNull() {
                this[this.tableProgStructCourse.PriorityColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssocCourseIDNull() {
                return this.IsNull(this.tableProgStructCourse.AssocCourseIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssocCourseIDNull() {
                this[this.tableProgStructCourse.AssocCourseIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsAssocVersionIDNull() {
                return this.IsNull(this.tableProgStructCourse.AssocVersionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetAssocVersionIDNull() {
                this[this.tableProgStructCourse.AssocVersionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartTrimesterIDNull() {
                return this.IsNull(this.tableProgStructCourse.StartTrimesterIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartTrimesterIDNull() {
                this[this.tableProgStructCourse.StartTrimesterIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsProgramIDNull() {
                return this.IsNull(this.tableProgStructCourse.ProgramIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetProgramIDNull() {
                this[this.tableProgStructCourse.ProgramIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCourseContentNull() {
                return this.IsNull(this.tableProgStructCourse.CourseContentColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCourseContentNull() {
                this[this.tableProgStructCourse.CourseContentColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsCreditsNull() {
                return this.IsNull(this.tableProgStructCourse.CreditsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetCreditsNull() {
                this[this.tableProgStructCourse.CreditsColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsCreditCourseNull() {
                return this.IsNull(this.tableProgStructCourse.IsCreditCourseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsCreditCourseNull() {
                this[this.tableProgStructCourse.IsCreditCourseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsThesisNull() {
                return this.IsNull(this.tableProgStructCourse.IsThesisColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsThesisNull() {
                this[this.tableProgStructCourse.IsThesisColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsProjectNull() {
                return this.IsNull(this.tableProgStructCourse.IsProjectColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsProjectNull() {
                this[this.tableProgStructCourse.IsProjectColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsHasEquivalentsNull() {
                return this.IsNull(this.tableProgStructCourse.HasEquivalentsColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetHasEquivalentsNull() {
                this[this.tableProgStructCourse.HasEquivalentsColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class ProgStructRow : global::System.Data.DataRow {
            
            private ProgStructDataTable tableProgStruct;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal ProgStructRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableProgStruct = ((ProgStructDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NodeID {
                get {
                    return ((int)(this[this.tableProgStruct.NodeIDColumn]));
                }
                set {
                    this[this.tableProgStruct.NodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string ProgStructureName {
                get {
                    return ((string)(this[this.tableProgStruct.ProgStructureNameColumn]));
                }
                set {
                    this[this.tableProgStruct.ProgStructureNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int ParentNodeID {
                get {
                    try {
                        return ((int)(this[this.tableProgStruct.ParentNodeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'ParentNodeID\' in table \'ProgStruct\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStruct.ParentNodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsLastLevel {
                get {
                    return ((bool)(this[this.tableProgStruct.IsLastLevelColumn]));
                }
                set {
                    this[this.tableProgStruct.IsLastLevelColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MinCredit {
                get {
                    try {
                        return ((decimal)(this[this.tableProgStruct.MinCreditColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinCredit\' in table \'ProgStruct\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStruct.MinCreditColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public decimal MaxCredit {
                get {
                    try {
                        return ((decimal)(this[this.tableProgStruct.MaxCreditColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxCredit\' in table \'ProgStruct\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStruct.MaxCreditColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MinCourses {
                get {
                    try {
                        return ((int)(this[this.tableProgStruct.MinCoursesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MinCourses\' in table \'ProgStruct\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStruct.MinCoursesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int MaxCourse {
                get {
                    try {
                        return ((int)(this[this.tableProgStruct.MaxCourseColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'MaxCourse\' in table \'ProgStruct\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStruct.MaxCourseColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsVirtual {
                get {
                    return ((bool)(this[this.tableProgStruct.IsVirtualColumn]));
                }
                set {
                    this[this.tableProgStruct.IsVirtualColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsBundle {
                get {
                    return ((bool)(this[this.tableProgStruct.IsBundleColumn]));
                }
                set {
                    this[this.tableProgStruct.IsBundleColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int StartTrimesterID {
                get {
                    try {
                        return ((int)(this[this.tableProgStruct.StartTrimesterIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'StartTrimesterID\' in table \'ProgStruct\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStruct.StartTrimesterIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OperatorID {
                get {
                    try {
                        return ((int)(this[this.tableProgStruct.OperatorIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OperatorID\' in table \'ProgStruct\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStruct.OperatorIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OperandNodes {
                get {
                    try {
                        return ((int)(this[this.tableProgStruct.OperandNodesColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OperandNodes\' in table \'ProgStruct\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableProgStruct.OperandNodesColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsParentNodeIDNull() {
                return this.IsNull(this.tableProgStruct.ParentNodeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetParentNodeIDNull() {
                this[this.tableProgStruct.ParentNodeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinCreditNull() {
                return this.IsNull(this.tableProgStruct.MinCreditColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinCreditNull() {
                this[this.tableProgStruct.MinCreditColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxCreditNull() {
                return this.IsNull(this.tableProgStruct.MaxCreditColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxCreditNull() {
                this[this.tableProgStruct.MaxCreditColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMinCoursesNull() {
                return this.IsNull(this.tableProgStruct.MinCoursesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMinCoursesNull() {
                this[this.tableProgStruct.MinCoursesColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsMaxCourseNull() {
                return this.IsNull(this.tableProgStruct.MaxCourseColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetMaxCourseNull() {
                this[this.tableProgStruct.MaxCourseColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStartTrimesterIDNull() {
                return this.IsNull(this.tableProgStruct.StartTrimesterIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetStartTrimesterIDNull() {
                this[this.tableProgStruct.StartTrimesterIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOperatorIDNull() {
                return this.IsNull(this.tableProgStruct.OperatorIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOperatorIDNull() {
                this[this.tableProgStruct.OperatorIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOperandNodesNull() {
                return this.IsNull(this.tableProgStruct.OperandNodesColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOperandNodesNull() {
                this[this.tableProgStruct.OperandNodesColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Represents strongly named DataRow class.
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public partial class VnodeSetRow : global::System.Data.DataRow {
            
            private VnodeSetDataTable tableVnodeSet;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            internal VnodeSetRow(global::System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableVnodeSet = ((VnodeSetDataTable)(this.Table));
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int VNodeSetID {
                get {
                    return ((int)(this[this.tableVnodeSet.VNodeSetIDColumn]));
                }
                set {
                    this[this.tableVnodeSet.VNodeSetIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int NodeID {
                get {
                    return ((int)(this[this.tableVnodeSet.NodeIDColumn]));
                }
                set {
                    this[this.tableVnodeSet.NodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int SetNo {
                get {
                    return ((int)(this[this.tableVnodeSet.SetNoColumn]));
                }
                set {
                    this[this.tableVnodeSet.SetNoColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OperandNodeID {
                get {
                    try {
                        return ((int)(this[this.tableVnodeSet.OperandNodeIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OperandNodeID\' in table \'VnodeSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVnodeSet.OperandNodeIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OperandCourseID {
                get {
                    try {
                        return ((int)(this[this.tableVnodeSet.OperandCourseIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OperandCourseID\' in table \'VnodeSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVnodeSet.OperandCourseIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public int OperandVersionID {
                get {
                    try {
                        return ((int)(this[this.tableVnodeSet.OperandVersionIDColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'OperandVersionID\' in table \'VnodeSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVnodeSet.OperandVersionIDColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string OperatorName {
                get {
                    return ((string)(this[this.tableVnodeSet.OperatorNameColumn]));
                }
                set {
                    this[this.tableVnodeSet.OperatorNameColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public string WildCard {
                get {
                    try {
                        return ((string)(this[this.tableVnodeSet.WildCardColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'WildCard\' in table \'VnodeSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVnodeSet.WildCardColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsStudntSpec {
                get {
                    try {
                        return ((bool)(this[this.tableVnodeSet.IsStudntSpecColumn]));
                    }
                    catch (global::System.InvalidCastException e) {
                        throw new global::System.Data.StrongTypingException("The value for column \'IsStudntSpec\' in table \'VnodeSet\' is DBNull.", e);
                    }
                }
                set {
                    this[this.tableVnodeSet.IsStudntSpecColumn] = value;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOperandNodeIDNull() {
                return this.IsNull(this.tableVnodeSet.OperandNodeIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOperandNodeIDNull() {
                this[this.tableVnodeSet.OperandNodeIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOperandCourseIDNull() {
                return this.IsNull(this.tableVnodeSet.OperandCourseIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOperandCourseIDNull() {
                this[this.tableVnodeSet.OperandCourseIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsOperandVersionIDNull() {
                return this.IsNull(this.tableVnodeSet.OperandVersionIDColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetOperandVersionIDNull() {
                this[this.tableVnodeSet.OperandVersionIDColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsWildCardNull() {
                return this.IsNull(this.tableVnodeSet.WildCardColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetWildCardNull() {
                this[this.tableVnodeSet.WildCardColumn] = global::System.Convert.DBNull;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public bool IsIsStudntSpecNull() {
                return this.IsNull(this.tableVnodeSet.IsStudntSpecColumn);
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public void SetIsStudntSpecNull() {
                this[this.tableVnodeSet.IsStudntSpecColumn] = global::System.Convert.DBNull;
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProgStructCourseRowChangeEvent : global::System.EventArgs {
            
            private ProgStructCourseRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgStructCourseRowChangeEvent(ProgStructCourseRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgStructCourseRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class ProgStructRowChangeEvent : global::System.EventArgs {
            
            private ProgStructRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgStructRowChangeEvent(ProgStructRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public ProgStructRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
        
        /// <summary>
        ///Row event argument class
        ///</summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Data.Design.TypedDataSetGenerator", "2.0.0.0")]
        public class VnodeSetRowChangeEvent : global::System.EventArgs {
            
            private VnodeSetRow eventRow;
            
            private global::System.Data.DataRowAction eventAction;
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VnodeSetRowChangeEvent(VnodeSetRow row, global::System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public VnodeSetRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
            public global::System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}

#pragma warning restore 1591